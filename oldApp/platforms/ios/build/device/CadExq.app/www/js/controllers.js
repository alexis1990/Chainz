angular.module('starter.controllers', []);
angular.module('myApplicationModule', ['google-maps'.ns()]);

.controller('AppCtrl', function($scope, $ionicModal, $timeout) {
    // Form data for the login modal
    $scope.loginData = {};

    // Create the login modal that we will use later
    $ionicModal.fromTemplateUrl('templates/login.html', {
        scope: $scope
    }).then(function(modal) {
        $scope.modal = modal;
    });

    // Triggered in the login modal to close it
    $scope.closeLogin = function() {
        $scope.modal.hide();
    };

    // Open the login modal
    $scope.login = function() {
        $scope.modal.show();
    };

    // Perform the login action when the user submits the login form
    $scope.doLogin = function() {
        console.log('Doing login', $scope.loginData);

        // Simulate a login delay. Remove this and replace with your login
        // code if using a login system
        $timeout(function() {
            $scope.closeLogin();
        }, 1000);
    };
})



.controller('PlaylistsCtrl',['$scope', 'GoogleMapApi'.ns(), function($scope, GoogleMapApi) {

    GoogleMapApi.then(function(maps) {

        $scope.maps = {
        center: {
            latitude: 45,
            longitude: -73
        },
            zoom: 8
        };

    });

  // CAPTURE VIDEO FUNCTION
  $scope.captureVideo = function(){

    var console = document.getElementById("console");

    var serverURL = "http://10.30.2.238:3000", // IMPORTANT: This URL needs to be accessible from your phone for testing.

    // Get List of images from server
    getFeed = function () {

        var xhr = getXMLHttpRequest();

        xhr.open("POST", serverURL + '/video', true);
        xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        xhr.send("videoname=fileName");

    },

    // Upload image to server
    upload = function (videoURI) {

        var ft = new FileTransfer(),
            videoPath = videoURI.fullPath,
            options = new FileUploadOptions();

        options.fileKey = "file";
        options.fileName = 'filename.mp4'; // We will use the name auto-generated by Node at the server side.
        options.mimeType = "video/mpeg4";
        options.chunkedMode = false;
        options.params = { // Whatever you populate options.params with, will be available in req.body at the server-side.
            "description": "Uploaded from my phone"
        };

        ft.upload(videoPath, serverURL + '/video',
            function (e) {
                console.insertAdjacentHTML('beforeend',"    File send     ");
                // getFeed();
            },
            function (e) {
                console.insertAdjacentHTML('beforeend',"ft upload failed      ");
                console.log("Upload failed");
            }, options);
    };
    
    // capture callback
    function captureSuccess(mediaFiles) {
      var i, path, len;
      for (i = 0, len = mediaFiles.length; i < len; i += 1) {
        path = mediaFiles[i].fullPath;
        upload(mediaFiles[i]);
      }
    }

    // capture error callback
    var captureError = function(error) {
        navigator.notification.alert('Error code: ' + error.code, null, 'Capture Error ........');
    };


    // Lancer l'application caméscope du mobile, 
    // permettant à l'utilisateur d'enregistrer jusqu'à 2 séquences vidéos
    navigator.device.capture.captureVideo(captureSuccess, captureError, {limit: 1});

  }

}]);





